
Chp 2: Java Program Development

- Development of a Java Program
  - Applets vs Java Applications
  - Steps to develop a Java Program
    1) Write Java code
    2) Compile Java code
    3) Execute/Run byte code using JVM
  - Java Development Environment (JDE)
    - Java Development Kit (JDK) - provide compilers and class libraries
    - Java Development Environment (JDE) - user interface
      jGRASP

- Writing My First Java Program
  - step 1: Write the Java source code in a text file 
    - comment: Compiler will ignore, but help human to read
    - Syntax: Class Definition
    - Syntax: The main() Method
    - Statements: gives instruction to the computer
	- simple statement
	- compound statement - braces
    - Using Methods from Other Classes
  - step 2: To compile your program
    - javac is JDK Java compiler
  - Step 3: To run the byte code with the Java interpreter
    - java <class name>

- Program Development Process
  - problem Solving
    - problem: specify a goal
    - finding a solution
  - 5 steps:
    1) Problem Specification
	- identify user requirements
    2) Problem Analysis
	- identify inputs, outputs, formulas
    3) Program Design
	- write solution steps 
	  (using pseudo code or flowcharts)
	- go through dry-run to test the 
	  solution steps using test samples
    4) Implementation
	- translate solution into computer program
    5) Program Testing 
	- use test samples to test the program

- Problem Specification
  - user requirements
    - program goals/purposes
    - program bounds: the inputs and outputs

- Problem Analysis
  - how the user uses the program (program input)
  - what output the program will generate
  - the functionalities (formulae) of the program
  - Additional requirements and constraints

- Program Design
  - Aim: design the logic of the program or algorithm
  - Steps:
    - Analyze the problem  
    - Design the program logic
	- verified against system specification
    - Design algorithm that gives the steps to transform 
      the inputs into the intended outputs.
    - Many techniques may be used to design the algorithms 
	- flowchart 
	- pseudo code
  - Algorithm:
    - informal English to describe the logic of the program
    - must be unambiguous
    - every step must be clear and precise
    - specify the order of steps precisely [Sequence]
    - consider all possible decision points [Branching and Looping]
    - terminate in finite time
    - Can be represented using pseudo code or Flowcharts
  - Pseudo code
    - A way to represent the logic or solution method of a program.
	- no strict rules
	- informal language 
	- with some common keywords for branching and looping
  - Flowcharts
    - represent the logic or solution method of a program by diagram
    - with some standard diagram symbols
  - Basic blocks for solutions:
    - Three basic control structures
	- Sequence
	  - one thing at a time; sequentially
	- Branching (Selection)
	  - follow the consequence with a decision making
	- Looping (Repetition) 
	  - repeat some instructions multiple times
  - Practice:
    - flowcharts for main concepts; more rough
    - pseudo code for more detailed program design

- Implementation
  - mapping (by you) the pseudo code to Java code

- Program Testing
  - A program is correct if it returns the correct result 
    for every possible combination of input values
  - Exhaustive testing
    - use all possible combinations 
    - impractical
  - Use testing data that causes every program path
  - Programming Errors
    - Syntax Errors
	- grammatical errors
	- detected by compiler
	- need to be fixed before the code can be compiled
    - Runtime Errors (you can compile the code, but...)
	- execution error
	- detected during the execution of program
	- error messages may be useful
	- sometimes not easy to fix
    - Logic Errors 
	- due to error in designing the algorithm or implementation
	- no compilation errors and no run-time error message
	- most difficult to detect
  - Program Debugging
    - Program Tracing
      - use System.out.println() at appropriate program locations
    - Debugger
      - Executing a single statement at a time
      - Tracing into or stepping over a method
      - Setting breakpoints
      - Displaying variables
      - Displaying call stacks
      - Modifying variables

- Documentation
  - needed for further modification and maintenance
  - Proper documentation includes:
    - problem definition and specification; 
    - program inputs, outputs, constraints and mathematical equations;
    - flowchart or pseudo code for the algorithm;
    - source program listing; 
    - sample test run of the program; and
    - user manual for end users.
